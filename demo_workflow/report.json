{
    "summary": {
        "directory": "/github/workspace/s3_module",
        "linted_files": 3
    },
    "linters": {
        "tflint": [
            {
                "Linter": "TFLint",
                "File": "main.tf",
                "Line": 1,
                "Description": "terraform \"required_version\" attribute is required",
                "Severity": "WARNING",
                "Context": "",
                "Links": [
                    "https://github.com/terraform-linters/tflint-ruleset-terraform/blob/v0.10.0/docs/rules/terraform_required_version.md"
                ]
            },
            {
                "Linter": "TFLint",
                "File": "main.tf",
                "Line": 10,
                "Description": "Missing version constraint for provider \"aws\" in `required_providers`",
                "Severity": "WARNING",
                "Context": "",
                "Links": [
                    "https://github.com/terraform-linters/tflint-ruleset-terraform/blob/v0.10.0/docs/rules/terraform_required_providers.md"
                ]
            }
        ],
        "tfsec": [
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 5,
                "Description": "Instance with unencrypted block device.",
                "Severity": "HIGH",
                "Context": "The identified high-severity issue revolves around an unencrypted block device associated with an instance in the terraform framework. This essentially means that the data stored on this device is not protected by an additional encryption layer, exposing it to potential unauthorized access or data breaches, thereby posing a substantial security risk. To rectify this issue, reconfigure the instance to incorporate an encrypted block device. With Terraform, you can leverage the \"aws_ebs_volume\" resource and set the \"kms_key_id\" argument to an Amazon Key Management Service (AWS KMS) customer master key (CMK) identifier. Implement secure key management practices using AWS KMS, and it's also advisable to adopt a robust access control mechanism to prevent unauthorized access to your keys.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/ec2/enable-at-rest-encryption/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#ebs-ephemeral-and-root-block-devices"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 5,
                "Description": "aws_instance should activate session tokens for Instance Metadata Service.",
                "Severity": "HIGH",
                "Context": "The issue at hand involves the absence of activated session tokens for Instance Metadata Service in our aws_instance on Terraform, making it a high-severity issue due to increased vulnerability to potential security breaches. The Instance Metadata Service (IMDS) often contains sensitive information, and without session tokens, unauthorized users can potentially gain access. To rectify this, it's recommended to enable Instance Metadata Service Version 2 (IMDSv2) that uses session-oriented requests, providing essential security by requiring the presence of a secret session token. Use Terraform to activate these tokens on all instances by implementing methods like PutInstanceMetadataOptions to set HttpTokens to 'required', ensuring future requests to IMDS will require a valid session token.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/ec2/enforce-http-token-imds/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Access block should block public ACL",
                "Severity": "HIGH",
                "Context": "This high-severity issue revolves around preventing public access to S3 buckets within an AWS infrastructure, mitigating potential unauthorized data manipulation or theft. In the Terraform setup, the property 'block public ACL' in the 'aws_s3_bucket_public_access_block' is not enabled, resulting in a security loophole. To rectify the issue, the block public access configuration should be adjusted in the Terraform script to prohibit public ACLs, thus tightening the security of the S3 buckets. The line \"block_public_acls = true\" should be added under resource \"aws_s3_bucket_public_access_block\" in the .tf file. This bars the S3 buckets from being accessed by public access control lists (ACLs) and strengthens the security posture of the system.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/block-public-acls/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#block_public_acls"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Access block should block public policy",
                "Severity": "HIGH",
                "Context": "The issue 'S3 Access block should block public policy' in the Terraform framework concerns the lack of a restriction on public access to S3 resources, indicating a potential exposure of sensitive data. The recommended resolution involves implementing an Access block and configuring it to block public policies in your Terraform code to prevent public access to the respective S3 resources. This would entail setting the 'block_public_policy' attribute to \"true\" within the 'aws_s3_bucket_public_access_block' resource block, effectively barring public access policies and ensuring that mission-critical or sensitive data is not exposed to unintended entities. Always verify that the changes meet compliance with the AWS S3 security best practices.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/block-public-policy/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#block_public_policy"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "Unencrypted S3 bucket.",
                "Severity": "HIGH",
                "Context": "The issue points to the Amazon S3 bucket being unencrypted, meaning that any data stored in this bucket is not adequately protected and can be accessed or manipulated if intercepted during the transfer. As an expert resolution, configure the S3 bucket to enforce Server-Side Encryption (SSE) with Amazon S3-managed keys (SSE-S3) or AWS Key Management Service (AWS-KMS). This ensures that any data written to the S3 bucket is automatically encrypted before it is saved, protecting against unauthorized access and securing data at rest.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/enable-bucket-encryption/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#enable-default-server-side-encryption"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Bucket does not have logging enabled.",
                "Severity": "MEDIUM",
                "Context": "",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/enable-bucket-logging/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Data should be versioned",
                "Severity": "MEDIUM",
                "Context": "",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/enable-versioning/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#versioning"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 encryption should use Customer Managed Keys",
                "Severity": "HIGH",
                "Context": "The issue 'S3 encryption should use Customer Managed Keys' pertains to the encryption practices Amazon S3 uses to secure data. Instead of the default AWS managed keys (SSE-S3), the recommendation is to utilize customer-managed keys (SSE-C) which provides a finer control over the encryption keys and might be obligatory by certain compliance requirements. To resolve this, in the Terraform framework, configure your S3 bucket to utilize AWS KMS for server-side encryption, by setting the argument `sse_algorithm` as `aws:kms` and applying a generated custom KMS key ID to the `kms_master_key_id` attribute within the AWS S3 bucket configuration. This will ensure a better management of the encryption keys used to secure data stored in the S3 buckets. Review and rotation of these keys should be part of routine security practices.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/encryption-customer-key/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#enable-default-server-side-encryption"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Access Block should Ignore Public Acl",
                "Severity": "HIGH",
                "Context": "The high-severity issue 'S3 Access Block should Ignore Public Acl' in the Terraform framework is largely associated with a misconfiguration that allows unrestricted (public) access to Amazon S3 buckets, which can result in potential data leakage or unauthorized data modification. Improper access control policies (ACLs) are usually the root cause. To rectify this issue, it is recommended that the 'Ignore Public Acl' setting be enabled in the S3 bucket's public access block configuration. This will effectively override any public access ACLs and enforce the intended access restrictions, reducing the risk of any unauthorized access and ensuring robust data security.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/ignore-public-acls/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#ignore_public_acls"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 12,
                "Description": "S3 Buckets not publicly accessible through ACL.",
                "Severity": "HIGH",
                "Context": "This high-severity issue indicates that the access control lists (ACLs) for your S3 buckets in Terraform are not publicly accessible; meaning sensitive data might be at risk of exposure to unauthorized users. To remediate this, adjust the configurations within Terraforms to ensure S3 buckets are private instead. First, set the 'acl' to 'private' on your aws_s3_bucket Terraform resource. Moreover, use the 'aws_s3_bucket_public_access_block' resource to block all public access at the bucket-level. Always follow a least-privilege access model to prevent potential data leaks and retain control over who can access your bucket resources. Regular audits using tools like AWS Trusted Advisor or other third-party solutions are advised to further ensure bucket security.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/no-public-access-with-acl/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Access block should restrict public bucket to limit access",
                "Severity": "HIGH",
                "Context": "The identified high-severity issue pertains to the security of Amazon S3 buckets. Specifically, it refers to unrestricted public access to the S3 bucket being potential security risks as it can lead to unauthorized access, data breaches, and data loss, thereby violating best practices for infrastructure security. To resolve this issue, it is recommended to modify the access policy settings of the S3 bucket to ensure that public access is duly restricted. This can be done by customizing the bucket policy in the Amazon S3 console to deny any public access and allow only authorized users or specific IP addresses, thereby effectively mitigating any potential security risk and ensuring data integrity and confidentiality.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/no-public-buckets/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#restrict_public_buckets\u00a1"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 buckets should each define an aws_s3_bucket_public_access_block",
                "Severity": "LOW",
                "Context": "",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/specify-public-access-block/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#bucket"
                ]
            }
        ],
        "checkov": [
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure Instance Metadata Service Version 1 is not enabled",
                "Severity": "HIGH",
                "Context": "The issue 'Ensure Instance Metadata Service (IMDS) Version 1 is not enabled' in the Terraform framework raises significant security concerns as IMDS V1 is prone to SSRF (Server Side Request Forgery) attacks due to lacking robust security measures. It poses potential vulnerabilities like unauthorized access to instance metadata, leading to leak of sensitive data. To mitigate this risk, it is recommended to upgrade to IMDS version 2, which requires a session-oriented approach and brings along essential security features including 'PUT' request requirement for obtaining the secret token. This token is then utilized to retrieve instance metadata, adding a protective layer against potential security breaches.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-31",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure that EC2 is EBS optimized",
                "Severity": "MEDIUM",
                "Context": "The issue 'Ensure that EC2 is EBS optimized' indicates that the EBS-backed EC2 instances in your AWS infrastructure are currently not configured for EBS optimization. This could limit the performance of your applications due to increased latency, as non-optimized instances have to share bandwidth between EBS volume traffic and other network traffic. In order to resolve this, you should ensure that 'ebs_optimized = true' is included in the configuration block of all your EC2 instances in your Terraform code. This enables EBS Optimization which provides dedicated bandwidth for EBS volume traffic, thereby reducing latency and improving the overall performance of your applications.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-ec2-is-ebs-optimized",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure that detailed monitoring is enabled for EC2 instances",
                "Severity": "MEDIUM",
                "Context": "This high-severity issue pertains to the lack of detailed monitoring for EC2 instances in the terraform framework. Detailed monitoring collects data every minute, providing more granular visibility into instance performance which is crucial for effective resource optimization and incident response. In the absence of such monitoring, irregularities or problems could go unnoticed, leading to potential performance issues, security threats, or even system failures. To resolve this, it is recommended to enable EC2 detailed monitoring within the terraform code. This can be achieved by setting the monitoring attribute to 'true' within the aws_instance resource block.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/ensure-that-detailed-monitoring-is-enabled-for-ec2-instances",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure all data stored in the Launch configuration or instance Elastic Blocks Store is securely encrypted",
                "Severity": "HIGH",
                "Context": "This issue refers to a major security vulnerability within the Terraform framework where the data stored in the Launch configuration or the Elastic Blocks Store (EBS) of an instance is not encrypted. Unencrypted data leaves sensitive information susceptible to breaches, making it an urgent task to rectify. To resolve this issue, one must update the terraform configuration to ensure that encryption is enabled for all EBS volumes. This can be achieved by setting the \"encrypted\" argument to true in the EBS block. Additionally, consider utilizing AWS Key Management Service (KMS) to manage the encryption keys for an added layer of security.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/general-13",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure S3 buckets should have event notifications enabled",
                "Severity": "MEDIUM",
                "Context": "The indicated high-severity issue pertains to the fact that your S3 buckets in the Terraform framework do not have event notifications enabled. Event notifications in S3 buckets are crucial as they allow automatic responses to various events such as the creation or deletion of an object, ensuring you're informed of any changes and enhancing overall security. Consequently, it's highly suggested that you enable event notifications for all your S3 buckets. This can be implemented via the 'bucket_notifications' argument in your 'aws_s3_bucket' resource block. Make sure to specify the necessary events and corresponding Lambda functions or SQS/SNS destinations to handle these events correctly, thereby not only ensuring regulatory compliance but also maintaining the security and integrity of your bucket data.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-62",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure the S3 bucket has access logging enabled",
                "Severity": "MEDIUM",
                "Context": "This high-severity issue refers to the lack of access logging on the S3 bucket in the Terraform framework, leading to a significant security concern. Access logging records all requests made to the S3 bucket, providing details like the requester, bucket name, request time, request actions, response status, and error codes, if any. Without this, tracing any requests or unauthorized access to your S3 bucket would be nearly impossible, making it crucial to any security or audit strategy. The recommended mitigation for this issue is to enable access logging on your S3 bucket via the AWS Management Console or using Terraform itself, specifying both the target bucket where logs would be saved and a prefix to organize log files.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-13-enable-logging",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure that S3 bucket has a Public Access block",
                "Severity": "HIGH",
                "Context": "The issue highlights the exposure of Amazon S3 buckets to public access, a situation that can lead to unauthorized data access or data loss. Due to the nature of its setting, an S3 bucket without a Public Access block can be accessed by anyone on the internet. To resolve this issue, it is recommended to enable a Public Access block on your S3 buckets. This could be achieved by configuring the S3 bucket ACL to only grant specific users or devices the right to access. Furthermore, the bucket policies should be carefully reviewed and updated to restrict public access. Via AWS Management Console, CLI, or SDK, the 'Block Public Access' setting can be updated to provide a higher degree of security to your Amazon S3 resources.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/s3-bucket-should-have-public-access-blocks-defaults-to-false-if-the-public-access-block-is-not-attached",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure that S3 bucket has cross-region replication enabled",
                "Severity": "MEDIUM",
                "Context": "The high-severity issue in the terraform framework - 'Ensure that S3 bucket has cross-region replication enabled', refers to a critical concern whereby the S3 bucket does not have an appropriate backup mechanism in place. Amazon S3's cross-region replication is an essential feature that enhances data durability and availability by automatically replicating your buckets across different geographical regions. Failing to enable cross-region replication can put your data at high risk from accidental deletion, outage, or a region-wide event. To resolve this issue, you must modify the bucket's settings to enable cross-region replication and ensure that the replication policy has been correctly applied. This may require configuring versioning and specifying a destination bucket and region, thereby ensuring that your S3 bucket data is safely replicated.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-bucket-has-cross-region-replication-enabled",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "S3 Bucket has an ACL defined which allows public READ access.",
                "Severity": "HIGH",
                "Context": "The issue implies that the S3 bucket in question is publicly accessible for read operations, allowing anyone on the internet to access and download files, which can result in potential data leaks, privacy violation, and regulatory non-compliance. It's recommended to rectify this flaw by modifying the bucket's Access Control List (ACL) to deny public access, or preferably switching to the use of dedicated IAM (Identity and Access Management) roles and policies or bucket policies for fine-grained control over who can access the S3 bucket. These options provide a higher level of security and limit the access scope of the bucket, promoting the principle of least privilege.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-1-acl-read-permissions-everyone",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure that S3 buckets are encrypted with KMS by default",
                "Severity": "HIGH",
                "Context": "The identified high-severity issue pertains to the lack of default encryption for the S3 buckets using KMS in the terraform framework. Deploying S3 buckets without default encryption significantly exposes crucial data to potential security threats, breaches, and unauthorized access. To remedy this issue, it is advisable to configure AWS KMS (Key Management Service) as the default server-side encryption on all S3 buckets. On the terraform code, under the required resource \"aws_s3_bucket\" block, include 'server_side_encryption_configuration' and specify 'aws:kms' in the 'sse_algorithm'. Also, provide a KMS key ID. This way, every new object in the bucket gets automatically encrypted based on the KMS key provided.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-buckets-are-encrypted-with-kms-by-default",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure all data stored in the S3 bucket have versioning enabled",
                "Severity": "HIGH",
                "Context": "The identified issue pertains to a high-severity vulnerability in the S3 bucket configuration where all the data stored does not have versioning enabled. Versioning allows for recovery from both unintended user actions and application failures by storing all versions of an object, including all writes and deletes. Without it, the risk of data loss or unwanted changes increases. To resolve this problem, you must enable versioning on all S3 buckets. This can be achieved by employing the 'versioning' argument within the S3 bucket configuration in the terraform scripting. Alongside, to prevent accidental data loss due to deletion, consider enabling MFA Delete, which requires additional authentication for deletions. By implementing these steps, data integrity and security in your S3 bucket can be significantly improved.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-16-enable-versioning",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure an IAM role is attached to EC2 instance",
                "Severity": "MEDIUM",
                "Context": "The high-severity issue 'Ensure an IAM role is attached to EC2 instance' in the Terraform framework signals a significant security risk, arising from the absence of an Identity and Access Management (IAM) role attached to an EC2 instance. This could potentially expose the system to unauthorized access, allowing opertors to perform actions without the necessary permissions. To resolve this issue, ensure that every Amazon EC2 instance that is created within your Terraform scripts has an IAM role associated with it. This can be achieved by explicitly defining an IAM instance profile within the Terraform configuration and associating it with the EC2 instance. Additionally, restrict these IAM roles to only the necessary permissions to limit potential security vulnerabilities.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/ensure-an-iam-role-is-attached-to-ec2-instance",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure that an S3 bucket has a lifecycle configuration",
                "Severity": "MEDIUM",
                "Context": "The high-severity issue refers to the absence of a lifecycle configuration for an S3 bucket in the Terraform framework, which can lead to unnecessary costs and potential data management issues. Lifecycle configurations dictate how long non-critical, obsolete, or duplicate data should remain in the S3 bucket before transitioning to a cheaper storage class or being deleted. To resolve this, implement a lifecycle policy in your Terraform code for every S3 bucket as per your requirements. This sets rules to automatically transition objects to less expensive storage options, or completely eliminate obsolete data after a certain period, optimizing costs and enhancing data management efficiency.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-61",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "EC2 instance should not have public IP.",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/public-policies/public-12",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure no hard-coded secrets exist in EC2 user data",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/secrets-policies/bc-aws-secrets-1",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure S3 bucket policy does not lockout all but root user. (Prevent lockouts needing root account fixes)",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-24",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "1 - 3",
                "Description": "Ensure no hard coded AWS access key and secret key exists in provider",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/secrets-policies/bc-aws-secrets-5",
                "Additional Context": "aws.default"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "S3 Bucket has an ACL defined which allows public WRITE access.",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-2-acl-write-permissions-everyone",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure all data stored in the S3 bucket is securely encrypted at rest",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-14-data-encrypted-at-rest",
                "Additional Context": "aws_s3_bucket.example"
            }
        ]
    }
}