{
    "summary": {
        "directory": "/github/workspace/s3_module",
        "linted_files": 3
    },
    "linters": {
        "tflint": [
            {
                "Linter": "TFLint",
                "File": "main.tf",
                "Line": 1,
                "Description": "terraform \"required_version\" attribute is required",
                "Severity": "WARNING",
                "Context": "",
                "Links": [
                    "https://github.com/terraform-linters/tflint-ruleset-terraform/blob/v0.10.0/docs/rules/terraform_required_version.md"
                ]
            },
            {
                "Linter": "TFLint",
                "File": "main.tf",
                "Line": 15,
                "Description": "Missing version constraint for provider \"aws\" in `required_providers`",
                "Severity": "WARNING",
                "Context": "",
                "Links": [
                    "https://github.com/terraform-linters/tflint-ruleset-terraform/blob/v0.10.0/docs/rules/terraform_required_providers.md"
                ]
            }
        ],
        "tfsec": [
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 5,
                "Description": "Instance with unencrypted block device.",
                "Severity": "HIGH",
                "Context": "The issue 'Instance with unencrypted block device' in the Terraform framework refers to a situation where the data stored on the block device of an instance is not encrypted. This poses a significant security risk because if an unauthorized person gains access to this block device, they can view and potentially manipulate sensitive data, leading to data leaks, corruption, or even service disruption. To resolve this, always ensure to enable encryption on your block device mappings when configuring your instances. You can do this by setting the 'encrypted' argument to 'true' in your Terraform configuration. It's also recommended to use AWS Key Management Service (KMS) for these encryption tasks as it offers added layers of security like key rotation and audit trails.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/ec2/enable-at-rest-encryption/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#ebs-ephemeral-and-root-block-devices"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 5,
                "Description": "aws_instance should activate session tokens for Instance Metadata Service.",
                "Severity": "HIGH",
                "Context": "This high-severity issue is regarding the non-activation of session tokens for the Instance Metadata Service in aws_instance, which poses a serious security threat as potential attackers can access sensitive information about the AWS instance including IAM role credentials. To resolve this issue, it is crucial to migrate to Instance Metadata Service Version 2 (IMDSv2), which necessitates the usage of session tokens, thus providing a significantly enhanced layer of security. Implement this upgrade in the Terraform code by changing the metadata options block in the AWS instance to require tokens: \"http_endpoint\" set as \"enabled\" and \"http_tokens\" as \"required\". This effectively mitigates the risk by ensuring tokens must be activated to retrieve metadata, therefore securing vital information.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/ec2/enforce-http-token-imds/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Access block should block public ACL",
                "Severity": "HIGH",
                "Context": "The issue pertains to the lack of security restriction in the terraform framework, where the S3 Access block isn't blocking public access control lists (ACLs), resulting in potential unauthorized data access or leak. AWS S3 buckets should not permit open public access, as it exposes resources to potential confidential data exposure and data breaches. As a remediation, it is recommended to update the S3 bucket policy within the terraform framework. The default public access to all AWS S3 buckets should be blocked by setting the 'block_public_acls' argument to 'true' in the 'aws_s3_bucket_public_access_block' resource. This ensures the bucket doesn't allow public ACLs, improving the security posture by restricting unnecessary public access.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/block-public-acls/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#block_public_acls"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Access block should block public policy",
                "Severity": "HIGH",
                "Context": "This high-severity issue primarily pertains to the potential exposure of S3 resources to the public, extending them significant accessibility. In order to stave off unauthorized access and potential security breaches, it is integral to enforce the blocking of public policies on S3 Access block settings. This can be achieved by setting the \"block_public_policy\" argument to \"true\" in the \"aws_s3_bucket_public_access_block\" resource. This ensures that the public access policy on the S3 bucket is vigorously limited, bolstering the security posture of the infrastructure.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/block-public-policy/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#block_public_policy"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "Unencrypted S3 bucket.",
                "Severity": "HIGH",
                "Context": "The identified issue pertains to the lack of encryption within an S3 bucket, raising a critical security vulnerability as any data stored is exposed and potentially susceptible to unauthorized access or breaches. It's essential to establish data-at-rest encryption to secure stored information. The recommended mitigation approach involves updating the S3 bucket policy to enforce Server Side Encryption (SSE) by default; this step will ensure that any future data uploaded to the bucket will be automatically encrypted. In addition, for any existing data in the bucket, you can apply encryption post-hoc using AWS S3's Copy operation, essentially rewriting the data with encryption enabled.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/enable-bucket-encryption/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#enable-default-server-side-encryption"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Bucket does not have logging enabled.",
                "Severity": "MEDIUM",
                "Context": "",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/enable-bucket-logging/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Data should be versioned",
                "Severity": "MEDIUM",
                "Context": "",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/enable-versioning/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#versioning"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 encryption should use Customer Managed Keys",
                "Severity": "HIGH",
                "Context": "The high-severity issue in the Terraform framework lies in the encryption of S3 buckets which is using Standard S3 Managed Keys (SSE-S3) instead of Customer Managed Keys (SSE-C). This is a major concern because SSE-S3 keys are solely managed by AWS, reducing the level of control customers have over their data security. For optimal data protection, it is recommended to modify the Terraform S3 bucket configurations to utilize SSE-C which offers not only an additional layer of security - as each object is encrypted with a unique key - but also full control over the encryption keys. Regularly rotate these keys as part of data security best practices to further enhance the protection of sensitive data.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/encryption-customer-key/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#enable-default-server-side-encryption"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Access Block should Ignore Public Acl",
                "Severity": "HIGH",
                "Context": "This high-severity issue revolves around the configuration setting for an S3 bucket in Amazon Web Services through Terraform which, as it stands, is not ignoring public access control lists (ACLs). This could potentially allow public access to data, leading to a data breach. The preferred solution to this issue involves adjusting the AWS S3 bucket policy through Terraform to strictly ignore public ACLs, minimizing the risk of unauthorized accessibility. Add the 'ignore_public_acls = true' attribute to your bucket ACL configuration. This way, it will safeguard the bucket contents against public exposure, significantly enhancing the security of your data stored in AWS S3 bucket.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/ignore-public-acls/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#ignore_public_acls"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 Access block should restrict public bucket to limit access",
                "Severity": "HIGH",
                "Context": "The issue 'S3 Access block should restrict public bucket to limit access' involves the potential exposure of sensitive data due to unrestricted public access to your S3 bucket in the AWS infrastructure, enabled through the Terraform framework. To secure your data, you need to configure a public access block on your S3 bucket. When deploying your infrastructure with Terraform, make sure you include the 'aws_s3_bucket_public_access_block' resource configuration. Set 'block_public_acls' and 'block_public_policy' to 'true', and 'ignore_public_acls' and 'restrict_public_buckets' to 'false'. By doing so, you will block new public ACLs and bucket policies, and prevent public and cross-account access to buckets that you specify.",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/no-public-buckets/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#restrict_public_buckets\u00a1"
                ]
            },
            {
                "Linter": "TFSec",
                "File": "main.tf",
                "Line": 10,
                "Description": "S3 buckets should each define an aws_s3_bucket_public_access_block",
                "Severity": "LOW",
                "Context": "",
                "Links": [
                    "https://aquasecurity.github.io/tfsec/v1.28.11/checks/aws/s3/specify-public-access-block/",
                    "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#bucket"
                ]
            }
        ],
        "checkov": [
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure Instance Metadata Service Version 1 is not enabled",
                "Severity": "HIGH",
                "Context": "The noted high-severity issue pertains to the use of the first version of Instance Metadata Service (IMDSv1) in the terraform framework which does not require session-oriented requests. This can expose a vulnerability where unauthorized applications might intercept the metadata of your instances by tricking the hop limit checks or the race condition inherent in IMDSv1. It is recommended to disable IMDSv1 and switch to Instance Metadata Service Version 2 (IMDSv2) which needs session-oriented requests, offering more security. Measures could be additionally put in place to ensure strict adherence to the use of IMDSv2, protecting the metadata and enhancing the security of the infrastructure.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-31",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure that EC2 is EBS optimized",
                "Severity": "MEDIUM",
                "Context": "The high-severity issue 'Ensure that EC2 is EBS optimized' refers to the critical need to ensure all Amazon EC2 instances are EBS-optimized for consistent disk I/O performance. EC2 instances that are not EBS-optimized may experience inconsistent latency due to variable network performance, posing severe threats to data integrity and application performance. To address this issue, it is recommended that you standardize configurations to always enable EBS-optimization on all EC2 instances. This can be achieved by setting the 'ebs_optimized' argument to true when deploying EC2 instances with Terraform, ensuring stable I/O performance for all EBS volumes attached to that instance.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-ec2-is-ebs-optimized",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure that detailed monitoring is enabled for EC2 instances",
                "Severity": "MEDIUM",
                "Context": "The identified issue 'Ensure that detailed monitoring is enabled for EC2 instances' pertains to the lack of consistent monitoring of Amazon EC2 instances, which could lead to overlooked abnormalities or threat activity. In this default configuration, the system collects metrics about every five minutes, preventing a real-time analysis of the instances and potentially delaying the detection of security issues. As a recommended action, it is crucial to enable detailed monitoring within your EC2 instances. This advanced setting allows data collection every minute, providing a more granular view of the instances' behavior and performance. Utilizing this method will therefore enhance the ability to detect unusual activity promptly, providing a stronger defensive posture and optimizing resource management.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/ensure-that-detailed-monitoring-is-enabled-for-ec2-instances",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure all data stored in the Launch configuration or instance Elastic Blocks Store is securely encrypted",
                "Severity": "HIGH",
                "Context": "This issue pertains to the security of data stored in AWS Elastic Block Store (EBS), which is used with Amazon EC2 instances, as provisioned by Terraform. The problem arises when the EBS volumes or the launch configurations are not encrypted leading to potential data exposure, cyber threats, and non-compliance with regulations like GDPR or HIPAA. As a recommended resolution, enable encryption for all EBS volumes and EC2 instances in the launch configuration or directly on EBS. Use AWS Key Management Service (KMS) for managing the encryption keys, making sure to maintain strict access controls and routine key rotations. Distinct IT and security teams should monitor and ensure these standards are consistently implemented.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/general-13",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure S3 buckets should have event notifications enabled",
                "Severity": "MEDIUM",
                "Context": "The issue at hand relates to the lack of event notifications on S3 buckets within the Terraform framework which can potentially compromise security and impede real-time monitoring. Such notifications act as an immediate alert system, tracking changes or actions like PUT, POST, DELETE etc., thus enhancing the oversight of data manipulation in your buckets. As a best practice, it is recommended to enable event notifications on all S3 buckets. This can be achieved by setting up a Lambda function or Simple Queue Service (SQS), or even Simple Notification Service (SNS) topic which are triggered by S3 bucket events. Implementing this action will bolster your infrastructure's security by ensuring prompt response to any potentially malicious activities.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-62",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure the S3 bucket has access logging enabled",
                "Severity": "MEDIUM",
                "Context": "This high-severity issue pertains to inadequate monitoring of AWS S3 bucket operations which may cause a potential security blind spot. Access logging in AWS S3 buckets records all requests made to a specific S3 bucket, providing critical security layer as it can track any data breach or unauthorized access. The recommended resolution is to enable access logging in the S3 bucket. This can be done by setting the 'logging' argument in the 'aws_s3_bucket' resource block in your Terraform code. Specify the target bucket where logs have to be stored, and, optionally, a key prefix. This will ensure all access to the S3 bucket is logged and can be audited for any potential intrusions or undesirable operations.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-13-enable-logging",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure that S3 bucket has a Public Access block",
                "Severity": "HIGH",
                "Context": "The issue, 'Ensure that S3 bucket has a Public Access block', pertains to the current state where the Amazon S3 buckets are exposed to public access. It means that anyone on the internet can have unauthorized access to the data stored within this bucket, leading to potential breaches of confidential and sensitive data. As a recommended solution, it's advised to modify the S3 bucket's access control list (ACL) to 'private' and enable the block public access settings. This configuration ensures that the S3 bucket does not grant open read/write permissions to the public. Moreover, implementing identity and access management (IAM) policies can provide granular control over who can access your S3 resources, enhancing security. Additionally, enable logging and monitoring to detect any unauthorized access attempts.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/s3-bucket-should-have-public-access-blocks-defaults-to-false-if-the-public-access-block-is-not-attached",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure that S3 bucket has cross-region replication enabled",
                "Severity": "MEDIUM",
                "Context": "The identified high-severity issue relates to data loss prevention in Amazon Web Services (AWS) infrastructure, specifically the absence of cross-region replication for a Simple Storage Service (S3) bucket. Cross-region replication is a feature that automatically replicates data across buckets in different geographical locations. It enhances data availability and redundancy, providing insurance against regional failures and accelerating data transfer speeds for geographically disparate users. To rectify this issue, it is recommended to incorporate an S3 configuration that enables cross-region replication. In the AWS Management Console, select the desired S3 bucket, navigate to the \"Management\" section, under \"Replication rules\", click \"Add rule\", and then select an existing bucket in a different region as the destination for the replicated data. Configure other rule settings as per your requirement to ensure data is seamlessly backed up across regions. It is also advisable to set up proper permissions and versioning for both source and destination buckets.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-bucket-has-cross-region-replication-enabled",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure that S3 buckets are encrypted with KMS by default",
                "Severity": "HIGH",
                "Context": "The issue pertains to the usage of Secure Sockets Layer (S3) buckets in the terraform environment which, by default, aren't encrypted using the Key Management Service (KMS). This can compromise data security, leaving sensitive information vulnerable to unauthorized access. It's recommended to configure all S3 buckets for KMS encryption as a default setting. This configuration allows AWS to use a secure and fortified method to manage cryptographic keys, thereby ensuring data protection. This can be done in the terraform script where the S3 bucket is being created, under the \"server_side_encryption_configuration.\" rule, where the 'aws:kms' value must be set for the 'sse_algorithm', thereby encrypting the S3 buckets by default.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-buckets-are-encrypted-with-kms-by-default",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure all data stored in the S3 bucket have versioning enabled",
                "Severity": "HIGH",
                "Context": "The identified high-severity issue pertains to the absence of versioning for data stored in the S3 bucket within the Terraform framework, which can lead to inadvertent data loss or replacement. Versioning is an important feature that retains various versions of objects stored in the bucket, assisting in data protection and recovery. To address this issue, it is advised to enable versioning for each S3 bucket by setting the versioning block parameter to \"enabled\" in the S3 bucket configuration. This ensures that all versions of the object are maintained, which permits recovery of older data forms and improves the overall security of your cloud infrastructure.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-16-enable-versioning",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure an IAM role is attached to EC2 instance",
                "Severity": "HIGH",
                "Context": "The issue pertains to the lack of an Identity and Access Management (IAM) role attached to EC2 instances in the Terraform configuration, resulting in potential unauthorized or unmonitored access. IAM roles provide secure and regulated AWS service interaction, including controlled access and network communication. To resolve this, you should ensure an IAM role is created with minimum required permissions and this should be associated with your EC2 instance as part of your Terraform code. Ideally, the IAM role should follow the principle of least privilege to minimize potential points of vulnerability.",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/ensure-an-iam-role-is-attached-to-ec2-instance",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure that an S3 bucket has a lifecycle configuration",
                "Severity": "LOW",
                "Context": "",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-61",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "EC2 instance should not have public IP.",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/public-policies/public-12",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "5 - 8",
                "Description": "Ensure no hard-coded secrets exist in EC2 user data",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/secrets-policies/bc-aws-secrets-1",
                "Additional Context": "aws_instance.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure S3 bucket policy does not lockout all but root user. (Prevent lockouts needing root account fixes)",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-24",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "15 - 35",
                "Description": "Ensure S3 bucket does not allow an action with any Principal",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-23",
                "Additional Context": "aws_s3_bucket_policy.example_policy"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "15 - 35",
                "Description": "Ensure S3 bucket policy does not lockout all but root user. (Prevent lockouts needing root account fixes)",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-24",
                "Additional Context": "aws_s3_bucket_policy.example_policy"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "1 - 3",
                "Description": "Ensure no hard coded AWS access key and secret key exists in provider",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/secrets-policies/bc-aws-secrets-5",
                "Additional Context": "aws.default"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "S3 Bucket has an ACL defined which allows public READ access.",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-1-acl-read-permissions-everyone",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "S3 Bucket has an ACL defined which allows public WRITE access.",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-2-acl-write-permissions-everyone",
                "Additional Context": "aws_s3_bucket.example"
            },
            {
                "Linter": "Checkov",
                "File": "/main.tf",
                "Line": "10 - 13",
                "Description": "Ensure all data stored in the S3 bucket is securely encrypted at rest",
                "Severity": "UNKNOWN",
                "Context": "PASSED",
                "Links": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-14-data-encrypted-at-rest",
                "Additional Context": "aws_s3_bucket.example"
            }
        ]
    }
}